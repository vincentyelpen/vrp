import numpy as np

def calculate_distance(point1, point2):
    # 在这里编写距离计算方法，可以根据需要选择合适的距离度量方法
    # 这里假设使用欧几里得距离计算方法
    return np.sqrt((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2)

def main():
    # 输入节点坐标
    nodes = [
        (0, 0), (1, 1), (2, 2), (3, 3), (4, 4),
        (5, 5), (6, 6), (7, 7), (8, 8), (9, 9),
        (10, 10), (11, 11), (12, 12), (13, 13), (14, 14)
    ]

    # 输入距离矩阵
    distance_matrix = [
        [0.0, 1.4, 2.8, 4.2, 5.7, 7.1, 8.5, 9.9, 11.3, 12.7, 14.1, 15.6, 17.0, 18.4, 19.8],
        [1.4, 0.0, 1.4, 2.8, 4.2, 5.7, 7.1, 8.5, 9.9, 11.3, 12.7, 14.1, 15.6, 17.0, 18.4],
        [2.8, 1.4, 0.0, 1.4, 2.8, 4.2, 5.7, 7.1, 8.5, 9.9, 11.3, 12.7, 14.1, 15.6, 17.0],
        [4.2, 2.8, 1.4, 0.0, 1.4, 2.8, 4.2, 5.7, 7.1, 8.5, 9.9, 11.3, 12.7, 14.1, 15.6],
        [5.7, 4.2, 2.8, 1.4, 0.0, 1.4, 2.8, 4.2, 5.7, 7.1, 8.5, 9.9, 11.3, 12.7, 14.1],
        [7.1, 5.7, 4.2, 2.8, 1.4, 0.0, 1.4, 2.8, 4.2, 5.7, 7.1, 8.5, 9.9, 11.3, 12.7],
        [8.5, 7.1, 5.7, 4.2, 2.8, 1.4, 0.0, 1.4, 2.8, 4.2, 5.7, 7.1, 8.5, 9.9, 11.3],
        [9.9, 8.5, 7.1, 5.7, 4.2, 2.8, 1.4, 0.0, 1.4, 2.8, 4.2, 5.7, 7.1, 8.5, 9.9],
        [11.3, 9.9, 8.5, 7.1, 5.7, 4.2, 2.8, 1.4, 0.0, 1.4, 2.8, 4.2, 5.7, 7.1, 8.5],
        [12.7, 11.3, 9.9, 8.5, 7.1, 5.7, 4.2, 2.8, 1.4, 0.0, 1.4, 2.8, 4.2, 5.7, 7.1],
        [14.1, 12.7, 11.3, 9.9, 8.5, 7.1, 5.7, 4.2, 2.8, 1.4, 0.0, 1.4, 2.8, 4.2, 5.7],
        [15.6, 14.1, 12.7, 11.3, 9.9, 8.5, 7.1, 5.7, 4.2, 2.8, 1.4, 0.0, 1.4, 2.8, 4.2],
        [17.0, 15.6, 14.1, 12.7, 11.3, 9.9, 8.5, 7.1, 5.7, 4.2, 2.8, 1.4, 0.0, 1.4, 2.8],
        [18.4, 17.0, 15.6, 14.1, 12.7, 11.3, 9.9, 8.5, 7.1, 5.7, 4.2, 2.8, 1.4, 0.0, 1.4],
        [19.8, 18.4, 17.0, 15.6, 14.1, 12.7, 11.3, 9.9, 8.5, 7.1, 5.7, 4.2, 2.8, 1.4, 0.0]
    ]

    # 验证距离矩阵
    for i in range(len(nodes)):
        for j in range(len(nodes)):
            expected_distance = calculate_distance(nodes[i], nodes[j])
            if abs(distance_matrix[i][j] - expected_distance) > 1e-6:
                print(f"距离矩阵错误：节点 {i} 到节点 {j} 的距离为 {distance_matrix[i][j]}，预期为 {expected_distance}")

    print("距离矩阵验证完成")

if __name__ == "__main__":
    main()
